import asyncio
import logging
import os
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.utils.keyboard import InlineKeyboardBuilder

from faq import FAQ


load_dotenv()

logging.basicConfig(level=logging.INFO)

BOT_TOKEN   = os.getenv("BOT_TOKEN")
SUPPORT_CHAT_ID = os.getenv("SUPPORT_CHAT_ID")

if not BOT_TOKEN or not SUPPORT_CHAT_ID:
    raise ValueError("Please set BOT_TOKEN and SUPPORT_CHAT_ID in .env file")


bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)


class SupportStates(StatesGroup):
    waiting_for_question = State()
    waiting_for_rating = State()
    waiting_for_reply = State()



active_conversations = {}
pending_replies = {}


@dp.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏.\n"
        "–ó–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–µ—Ä–µ–¥–∞–º –µ–≥–æ –∫–æ–º–∞–Ω–¥–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /faq –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤."
    )

@dp.message(Command("help"))
async def cmd_help(message: Message):
    await message.answer(
        "üìù –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:\n\n"
        "1. –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å\n"
        "2. –û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ\n"
        "3. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç\n"
        "4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /faq –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —á–∞—Å—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤\n\n"
        "–ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –æ—Ç–≤–µ—Ç–∏—Ç –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
    )

@dp.message(Command("faq"))
async def cmd_faq(message: Message):
    faq_text = "üìö –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:\n\n"
    for question, answer in FAQ.items():
        faq_text += f"‚ùì {question.capitalize()}\n{answer}\n\n"
    await message.answer(faq_text)

@dp.message(F.text)
async def handle_question(message: Message, state: FSMContext):
    if str(message.chat.id) == SUPPORT_CHAT_ID and message.reply_to_message:
        original_text = message.reply_to_message.text or message.reply_to_message.caption
        
        user_id = None
        if original_text:
            for line in original_text.split('\n'):
                if "ID:" in line:
                    try:
                        user_id = int(line.split("ID:")[1].strip().split(")")[0])
                        break
                    except (ValueError, IndexError):
                        continue

        if user_id and user_id in active_conversations:
            await bot.send_message(
                active_conversations[user_id],
                f"üì¨ –û—Ç–≤–µ—Ç –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n\n{message.text}\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–∞:",
                reply_markup=get_rating_keyboard()
            )

            await message.reply("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
        return


    message_lower = message.text.lower()
    for question, answer in FAQ.items():
        if question in message_lower:
            await message.answer(f"üìö –û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å:\n\n{answer}")
            return

    active_conversations[message.from_user.id] = message.chat.id

    await bot.send_message(
        SUPPORT_CHAT_ID,
        f"üì© –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.full_name} (ID: {message.from_user.id}):\n\n"
        f"{message.text}"
    )
    
    await message.answer(
        "‚úÖ –í–∞—à –≤–æ–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω! –ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç –µ–≥–æ –∏ –æ—Ç–≤–µ—Ç–∏—Ç –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
    )


@dp.message(F.photo | F.document)
async def handle_files(message: Message):

    active_conversations[message.from_user.id] = message.chat.id


    if message.photo:
        file_id = message.photo[-1].file_id
        caption = f"üì∏ –§–æ—Ç–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.full_name} (ID: {message.from_user.id})"
        if message.caption:
            caption += f"\n\n–ü–æ–¥–ø–∏—Å—å: {message.caption}"
        await bot.send_photo(SUPPORT_CHAT_ID, file_id, caption=caption)
    elif message.document:
        file_id = message.document.file_id
        caption = f"üìÑ –î–æ–∫—É–º–µ–Ω—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.full_name} (ID: {message.from_user.id})"
        if message.caption:
            caption += f"\n\n–ü–æ–¥–ø–∏—Å—å: {message.caption}"
        await bot.send_document(SUPPORT_CHAT_ID, file_id, caption=caption)


    await message.answer(
        "‚úÖ –í–∞—à —Ñ–∞–π–ª –ø–æ–ª—É—á–µ–Ω! –ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç –µ–≥–æ –∏ –æ—Ç–≤–µ—Ç–∏—Ç –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
    )


@dp.callback_query(lambda c: c.data.startswith('rate_'))
async def process_rating(callback: CallbackQuery):
    rating = callback.data.split('_')[1]
    await callback.message.edit_text(
        f"{callback.message.text}\n\n"
        f"–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É: {rating} ‚≠ê"
    )
    await callback.answer()

def get_rating_keyboard():
    builder = InlineKeyboardBuilder()
    for i in range(1, 6):
        builder.button(text=f"{i}‚≠ê", callback_data=f"rate_{i}")
    builder.adjust(5)
    return builder.as_markup()

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
